[
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "key",
        "importPath": "tuples",
        "description": "tuples",
        "isExtraImport": true,
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations_with_replacement",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "accumulate",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "groupby",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "count",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "repeat",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "Calculatr",
        "description": "Calculatr",
        "peekOfCode": "num1 = float(input(\"Enter a number: \"))\nnum2 = float(input(\"Enter second number number: \"))\nop = input(\"enter opration\")\nresult = num1 + num2\nif op == \"+\":\n    print(num1 +  num2)\nelif op == \"-\":\n    print(num1 - num2)\nelif op == \"*\":\n    print(num1 * num2)",
        "detail": "Calculatr",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "Calculatr",
        "description": "Calculatr",
        "peekOfCode": "num2 = float(input(\"Enter second number number: \"))\nop = input(\"enter opration\")\nresult = num1 + num2\nif op == \"+\":\n    print(num1 +  num2)\nelif op == \"-\":\n    print(num1 - num2)\nelif op == \"*\":\n    print(num1 * num2)\nelif op == \"/\":",
        "detail": "Calculatr",
        "documentation": {}
    },
    {
        "label": "op",
        "kind": 5,
        "importPath": "Calculatr",
        "description": "Calculatr",
        "peekOfCode": "op = input(\"enter opration\")\nresult = num1 + num2\nif op == \"+\":\n    print(num1 +  num2)\nelif op == \"-\":\n    print(num1 - num2)\nelif op == \"*\":\n    print(num1 * num2)\nelif op == \"/\":\n    print(num1 / num2)    ",
        "detail": "Calculatr",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Calculatr",
        "description": "Calculatr",
        "peekOfCode": "result = num1 + num2\nif op == \"+\":\n    print(num1 +  num2)\nelif op == \"-\":\n    print(num1 - num2)\nelif op == \"*\":\n    print(num1 * num2)\nelif op == \"/\":\n    print(num1 / num2)    \nelif op == \"%\":",
        "detail": "Calculatr",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 6,
        "importPath": "classes_objects",
        "description": "classes_objects",
        "peekOfCode": "class student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n    def on_honor_roll(self):\n        if self.gpa >= 3.5:\n            return f\"verygood{self.name}\"\n        else:\n            return False\nstudent1 = student(name = \" rahim\", gpa= 3.2)",
        "detail": "classes_objects",
        "documentation": {}
    },
    {
        "label": "student1",
        "kind": 5,
        "importPath": "classes_objects",
        "description": "classes_objects",
        "peekOfCode": "student1 = student(name = \" rahim\", gpa= 3.2)\nstudent2 = student(name = \" ali wzir\", gpa= 3.8)\nprint(student2.on_honor_roll())\nprint(student1.gpa)\nprint(student2.name)",
        "detail": "classes_objects",
        "documentation": {}
    },
    {
        "label": "student2",
        "kind": 5,
        "importPath": "classes_objects",
        "description": "classes_objects",
        "peekOfCode": "student2 = student(name = \" ali wzir\", gpa= 3.8)\nprint(student2.on_honor_roll())\nprint(student1.gpa)\nprint(student2.name)",
        "detail": "classes_objects",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "a = 'aaaaaaaaaaannnnnnnnnnnnnnnnbbbbbbbbbbbbbbbbcccccccccccccccccc'\nb = Counter(a)\nprint(b)        #Counter({'c': 18, 'n': 16, 'b': 16, 'a': 11})\nprint(b.items())        #dict_items([('a', 11), ('n', 16), ('b', 16), ('c', 18)])\nprint(b.keys())     #dict_keys(['a', 'n', 'b', 'c'])\nprint(b.values())   #dict_values([11, 16, 16, 18])\nprint(b.most_common(2))    #[('c', 18), ('n', 16)]\nprint(list(a) )   #['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\n# /////////////////////////////////////////////////////////////////////\n# /////////////////////////////////////////////////////////////////////",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "b = Counter(a)\nprint(b)        #Counter({'c': 18, 'n': 16, 'b': 16, 'a': 11})\nprint(b.items())        #dict_items([('a', 11), ('n', 16), ('b', 16), ('c', 18)])\nprint(b.keys())     #dict_keys(['a', 'n', 'b', 'c'])\nprint(b.values())   #dict_values([11, 16, 16, 18])\nprint(b.most_common(2))    #[('c', 18), ('n', 16)]\nprint(list(a) )   #['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c']\n# /////////////////////////////////////////////////////////////////////\n# /////////////////////////////////////////////////////////////////////\n# /////////////////////////////////////////////////////////////////////",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "point",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "point = namedtuple('point','x,y')\npt = point(1,9)     #point(x=1, y=9)        actually this create a point class\nprint(pt)\nprint(pt.x,pt.y)\n# ///////////////////////////////////////\n# ///////////////////////////////////////\n# ///////////////////////////////////////\n# ///////////////////////////////////////\nordered_dict = OrderedDict()\nordered_dict = {}       # both above and this is same}",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "pt",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "pt = point(1,9)     #point(x=1, y=9)        actually this create a point class\nprint(pt)\nprint(pt.x,pt.y)\n# ///////////////////////////////////////\n# ///////////////////////////////////////\n# ///////////////////////////////////////\n# ///////////////////////////////////////\nordered_dict = OrderedDict()\nordered_dict = {}       # both above and this is same}\nordered_dict['d'] = 1",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict = OrderedDict()\nordered_dict = {}       # both above and this is same}\nordered_dict['d'] = 1\nordered_dict['b'] = 2\nordered_dict['c'] = 3\nordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict = {}       # both above and this is same}\nordered_dict['d'] = 1\nordered_dict['b'] = 2\nordered_dict['c'] = 3\nordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict['d']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict['d'] = 1\nordered_dict['b'] = 2\nordered_dict['c'] = 3\nordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# defaultdict",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict['b']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict['b'] = 2\nordered_dict['c'] = 3\nordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# defaultdict\nd = defaultdict(int)",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict['c']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict['c'] = 3\nordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# defaultdict\nd = defaultdict(int)\nd['a'] = 1",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "ordered_dict['a']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "ordered_dict['a'] = 4\nprint(ordered_dict)     #OrderedDict([('d', 1), ('b', 2), ('c', 3), ('a', 4)])\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# defaultdict\nd = defaultdict(int)\nd['a'] = 1\nd['b'] = 2",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "d = defaultdict(int)\nd['a'] = 1\nd['b'] = 2\nd['c'] = 3\nprint(d)    #defaultdict(<class 'int'>, {'a': 1, 'b': 2, 'c': 3})\nprint(d['e'])       #so as here it is declared as default so it will not give an error but will give zeroa sin integer\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "d['a']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "d['a'] = 1\nd['b'] = 2\nd['c'] = 3\nprint(d)    #defaultdict(<class 'int'>, {'a': 1, 'b': 2, 'c': 3})\nprint(d['e'])       #so as here it is declared as default so it will not give an error but will give zeroa sin integer\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# deque : double ended que i.e actually a list upon which we can do opeerration from bith sides",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "d['b']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "d['b'] = 2\nd['c'] = 3\nprint(d)    #defaultdict(<class 'int'>, {'a': 1, 'b': 2, 'c': 3})\nprint(d['e'])       #so as here it is declared as default so it will not give an error but will give zeroa sin integer\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# deque : double ended que i.e actually a list upon which we can do opeerration from bith sides\nd1 = deque()",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "d['c']",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "d['c'] = 3\nprint(d)    #defaultdict(<class 'int'>, {'a': 1, 'b': 2, 'c': 3})\nprint(d['e'])       #so as here it is declared as default so it will not give an error but will give zeroa sin integer\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# //////////////////////////////////////////////////\n# deque : double ended que i.e actually a list upon which we can do opeerration from bith sides\nd1 = deque()\nd1.append(1)",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "collection",
        "description": "collection",
        "peekOfCode": "d1 = deque()\nd1.append(1)\nd1.append(2)\nd1.append(3)\nd1.append(3)\nd1.append(3)\nprint(d1)\nd1.appendleft(4)\nprint(d1)\nd1.pop()        #delete one element",
        "detail": "collection",
        "documentation": {}
    },
    {
        "label": "months",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "months = {\"ist\" : \"jan\",\n          \"sec\": \"feb\"}\nprint(months)\nprint(months.get(\"sec\"))\nprint(months.get(\"third\", \"not presesnt\"))\ndict1 = dict(name = \"rahim\", age = \"4\")     #{'name': 'rahim', 'age': '4'}\nprint(dict1)\nprint(dict1[\"age\"])     #4\n# del dict1[\"age\"]        #will delete this\n# dict1.pop(\"age\")        #will remove spcific",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "dict1",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "dict1 = dict(name = \"rahim\", age = \"4\")     #{'name': 'rahim', 'age': '4'}\nprint(dict1)\nprint(dict1[\"age\"])     #4\n# del dict1[\"age\"]        #will delete this\n# dict1.pop(\"age\")        #will remove spcific\n# dict1.popitem()     # will remove last one\nif \"name\" in dict1:\n    print(dict1[\"name\"])\ntry:\n    print(dict1[\"phone_number\"])    ",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d1 = {\"name\" :\"aaaaa\", \"age\" :5}\nd2 = {\"name\" :\"rahim\", \"p_number\": 9987}        # name will be updated and phone number will be added\nd1.update(d2)\nprint(d1)\nd3 = {3:5,6:9,8:16}\nprint(d3)\nmytple = (8,7)\nd3 = {mytple:15}\nprint(d3) # {(8,7):15}\n# to make a dictionary of such whose value are aquare of their keys",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d2 = {\"name\" :\"rahim\", \"p_number\": 9987}        # name will be updated and phone number will be added\nd1.update(d2)\nprint(d1)\nd3 = {3:5,6:9,8:16}\nprint(d3)\nmytple = (8,7)\nd3 = {mytple:15}\nprint(d3) # {(8,7):15}\n# to make a dictionary of such whose value are aquare of their keys\na = [1,2,3,4,5]",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d3 = {3:5,6:9,8:16}\nprint(d3)\nmytple = (8,7)\nd3 = {mytple:15}\nprint(d3) # {(8,7):15}\n# to make a dictionary of such whose value are aquare of their keys\na = [1,2,3,4,5]\nd11 = {num:num*num for num in a}\nprint(d11)\n# Example 3: Using Strings",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "mytple",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "mytple = (8,7)\nd3 = {mytple:15}\nprint(d3) # {(8,7):15}\n# to make a dictionary of such whose value are aquare of their keys\na = [1,2,3,4,5]\nd11 = {num:num*num for num in a}\nprint(d11)\n# Example 3: Using Strings\n# Creating a dictionary from a string where keys are characters and values are their ASCII values.\ntext = \"rahim\"",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d3 = {mytple:15}\nprint(d3) # {(8,7):15}\n# to make a dictionary of such whose value are aquare of their keys\na = [1,2,3,4,5]\nd11 = {num:num*num for num in a}\nprint(d11)\n# Example 3: Using Strings\n# Creating a dictionary from a string where keys are characters and values are their ASCII values.\ntext = \"rahim\"\nd11 = {keys: ord(keys) for keys in text }",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "a = [1,2,3,4,5]\nd11 = {num:num*num for num in a}\nprint(d11)\n# Example 3: Using Strings\n# Creating a dictionary from a string where keys are characters and values are their ASCII values.\ntext = \"rahim\"\nd11 = {keys: ord(keys) for keys in text }\nprint(d11)\n# swapping key and values\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d11",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d11 = {num:num*num for num in a}\nprint(d11)\n# Example 3: Using Strings\n# Creating a dictionary from a string where keys are characters and values are their ASCII values.\ntext = \"rahim\"\nd11 = {keys: ord(keys) for keys in text }\nprint(d11)\n# swapping key and values\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nnew_dict = {value:key for key,value in original_dict.items()}",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "text = \"rahim\"\nd11 = {keys: ord(keys) for keys in text }\nprint(d11)\n# swapping key and values\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nnew_dict = {value:key for key,value in original_dict.items()}\nprint(new_dict)",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "d11",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "d11 = {keys: ord(keys) for keys in text }\nprint(d11)\n# swapping key and values\noriginal_dict = {'a': 1, 'b': 2, 'c': 3}\nnew_dict = {value:key for key,value in original_dict.items()}\nprint(new_dict)",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "original_dict",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "original_dict = {'a': 1, 'b': 2, 'c': 3}\nnew_dict = {value:key for key,value in original_dict.items()}\nprint(new_dict)",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "new_dict",
        "kind": 5,
        "importPath": "dictionary",
        "description": "dictionary",
        "peekOfCode": "new_dict = {value:key for key,value in original_dict.items()}\nprint(new_dict)",
        "detail": "dictionary",
        "documentation": {}
    },
    {
        "label": "exponent_function",
        "kind": 2,
        "importPath": "exponent_ftn",
        "description": "exponent_ftn",
        "peekOfCode": "def exponent_function(base_num, pow_num):\n    result = 1\n    for i in range(pow_num):\n        result = result *base_num\n    return result\nprint(exponent_function(3,4))",
        "detail": "exponent_ftn",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "For_loop",
        "description": "For_loop",
        "peekOfCode": "name = \"rahim\"\nfor letter in name:\n    print(letter) #it will print character of above string one by one\nnum = [1,2,3,4,5]\nfor i in num:\n    print(i)\nfor number in range(10):\n    print(number)    \nfriends = ['abc',\"def\", \"jhk\"]\nfor index in  range(len(friends)):",
        "detail": "For_loop",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "For_loop",
        "description": "For_loop",
        "peekOfCode": "num = [1,2,3,4,5]\nfor i in num:\n    print(i)\nfor number in range(10):\n    print(number)    \nfriends = ['abc',\"def\", \"jhk\"]\nfor index in  range(len(friends)):\n    print(friends[index])",
        "detail": "For_loop",
        "documentation": {}
    },
    {
        "label": "friends",
        "kind": 5,
        "importPath": "For_loop",
        "description": "For_loop",
        "peekOfCode": "friends = ['abc',\"def\", \"jhk\"]\nfor index in  range(len(friends)):\n    print(friends[index])",
        "detail": "For_loop",
        "documentation": {}
    },
    {
        "label": "say_hi",
        "kind": 2,
        "importPath": "ftn",
        "description": "ftn",
        "peekOfCode": "def say_hi(name,age):\n    print(\"hello \" + name + \"you are \"+ str(age) )\nprint(\"rahim\")\nsay_hi(\"rahim\", 23)    # a piece of informaiton that is given to function\n# Return statements\ndef cube(num):\n    return num*num*num\nprint(cube(5))",
        "detail": "ftn",
        "documentation": {}
    },
    {
        "label": "cube",
        "kind": 2,
        "importPath": "ftn",
        "description": "ftn",
        "peekOfCode": "def cube(num):\n    return num*num*num\nprint(cube(5))",
        "detail": "ftn",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "guessing_Game",
        "description": "guessing_Game",
        "peekOfCode": "target = \"correct\"\nguess = \"\"\nguess_limit = 3\nwhile guess != target and guess_limit != 0 :\n    guess = input(\"enter your guess: \")\n    guess_limit -= 1\nif guess == target:\n    print(\"u win. \")\nelse:    \n    print(\"u lose. \")",
        "detail": "guessing_Game",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "guessing_Game",
        "description": "guessing_Game",
        "peekOfCode": "guess = \"\"\nguess_limit = 3\nwhile guess != target and guess_limit != 0 :\n    guess = input(\"enter your guess: \")\n    guess_limit -= 1\nif guess == target:\n    print(\"u win. \")\nelse:    \n    print(\"u lose. \")",
        "detail": "guessing_Game",
        "documentation": {}
    },
    {
        "label": "guess_limit",
        "kind": 5,
        "importPath": "guessing_Game",
        "description": "guessing_Game",
        "peekOfCode": "guess_limit = 3\nwhile guess != target and guess_limit != 0 :\n    guess = input(\"enter your guess: \")\n    guess_limit -= 1\nif guess == target:\n    print(\"u win. \")\nelse:    \n    print(\"u lose. \")",
        "detail": "guessing_Game",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 2,
        "importPath": "if_statements",
        "description": "if_statements",
        "peekOfCode": "def max(num1, num2, num3):\n    if num1 > num2 and num2 > num3:\n        return num1\n    elif num2 >  num1 and num2 > num3:\n        return num2\n    else:\n        return num3\nprint(max(12,23,34))",
        "detail": "if_statements",
        "documentation": {}
    },
    {
        "label": "marks",
        "kind": 5,
        "importPath": "if_statements",
        "description": "if_statements",
        "peekOfCode": "marks = 45\ngradute = True\nmale = True\nif marks >= 50:\n    print(\"you are pass\")   \nelif male and gradute:\n    print(\"you are male\")\nelse:                                       # we cannot put condition in else \n    print(\"best of luck for next time\")        \n# comparison through if statements",
        "detail": "if_statements",
        "documentation": {}
    },
    {
        "label": "gradute",
        "kind": 5,
        "importPath": "if_statements",
        "description": "if_statements",
        "peekOfCode": "gradute = True\nmale = True\nif marks >= 50:\n    print(\"you are pass\")   \nelif male and gradute:\n    print(\"you are male\")\nelse:                                       # we cannot put condition in else \n    print(\"best of luck for next time\")        \n# comparison through if statements\n    #  == comparison operator",
        "detail": "if_statements",
        "documentation": {}
    },
    {
        "label": "male",
        "kind": 5,
        "importPath": "if_statements",
        "description": "if_statements",
        "peekOfCode": "male = True\nif marks >= 50:\n    print(\"you are pass\")   \nelif male and gradute:\n    print(\"you are male\")\nelse:                                       # we cannot put condition in else \n    print(\"best of luck for next time\")        \n# comparison through if statements\n    #  == comparison operator\ndef max(num1, num2, num3):",
        "detail": "if_statements",
        "documentation": {}
    },
    {
        "label": "chef",
        "kind": 6,
        "importPath": "inhiritance",
        "description": "inhiritance",
        "peekOfCode": "class chef:\n    def make_chicken(self):\n        print(\"chef can make chicken\")\n    def make_salad(self):\n        print(\"chef can make salad\")\n    def make_special_dish(self):\n        print(\"chef can make special  bbq\")\nclass chineese_chef(chef):\n    def make_fried_rice(self):\n        print(\"chineese can make fried rice\")",
        "detail": "inhiritance",
        "documentation": {}
    },
    {
        "label": "chineese_chef",
        "kind": 6,
        "importPath": "inhiritance",
        "description": "inhiritance",
        "peekOfCode": "class chineese_chef(chef):\n    def make_fried_rice(self):\n        print(\"chineese can make fried rice\")\n    def make_special_dish(self):\n        print(\"chineense can make special orange chicken\")  \nmy_chef = chef()\nmy_chineese_chef = chineese_chef()\nmy_chef.make_chicken()\nmy_chineese_chef.make_fried_rice()\nmy_chineese_chef.make_chicken()",
        "detail": "inhiritance",
        "documentation": {}
    },
    {
        "label": "my_chef",
        "kind": 5,
        "importPath": "inhiritance",
        "description": "inhiritance",
        "peekOfCode": "my_chef = chef()\nmy_chineese_chef = chineese_chef()\nmy_chef.make_chicken()\nmy_chineese_chef.make_fried_rice()\nmy_chineese_chef.make_chicken()\nmy_chef.make_special_dish()\nmy_chineese_chef.make_special_dish()",
        "detail": "inhiritance",
        "documentation": {}
    },
    {
        "label": "my_chineese_chef",
        "kind": 5,
        "importPath": "inhiritance",
        "description": "inhiritance",
        "peekOfCode": "my_chineese_chef = chineese_chef()\nmy_chef.make_chicken()\nmy_chineese_chef.make_fried_rice()\nmy_chineese_chef.make_chicken()\nmy_chef.make_special_dish()\nmy_chineese_chef.make_special_dish()",
        "detail": "inhiritance",
        "documentation": {}
    },
    {
        "label": "smaller_than_3",
        "kind": 2,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "def smaller_than_3(x):\n    return x<3\ngroup_obj = groupby(g, key = smaller_than_3)\nfor key,value in group_obj:\n    print(key,list(value)) #True [1, 2] False [3, 4, 5]\n    person = [\n        {\"name\":\"rahim\", \"age\":23},\n        {\"name\":\"rwim\" ,\"age\":23},\n        {\"name\":\"nahim\", \"age\":26},\n        {\"name\":\"raddddim\", \"age\":26}]",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "prod",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "prod = product(a,b)     \nprint(list(prod))#[(1, 3), (1, 4), (2, 3), (2, 4)]\n# ///////////////////permutation///////////////\n# ///////////////////\n# ///////////////////\nc = [1,2,3]\nprint(list(permutations(c)))\nprint(list(permutations(c,2))) #permutation of length 2\n# ///////////////////\n# ///////////////////",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "c = [1,2,3]\nprint(list(permutations(c)))\nprint(list(permutations(c,2))) #permutation of length 2\n# ///////////////////\n# ///////////////////\n# ///////////////////combination//////////here no repeatition is allowed\nd = [1,2,3,4]\nprint(list(combinations(d,2)))\nprint(list(combinations_with_replacement(d,2)))     # means repitition allowed here\n# //////////////////////////////////////////",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "d = [1,2,3,4]\nprint(list(combinations(d,2)))\nprint(list(combinations_with_replacement(d,2)))     # means repitition allowed here\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# Accumuate function\nacc = [1,2,3,4]\nprint(list(accumulate(acc)))        #[1, 3, 6, 10]this only sum\nprint(list(accumulate(acc,func = operator.mul)))#[1, 2, 6, 24]this will multiply",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "acc",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "acc = [1,2,3,4]\nprint(list(accumulate(acc)))        #[1, 3, 6, 10]this only sum\nprint(list(accumulate(acc,func = operator.mul)))#[1, 2, 6, 24]this will multiply\nmaxm = [1,2,5,3,4]\nprint(list(accumulate(maxm,func = max)))#[1, 2, 5, 5, 5]\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# groupby but this concept is not clear\ng = [1,2,3,4,5]\ndef smaller_than_3(x):",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "print(list(accumulate(acc,func",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "print(list(accumulate(acc,func = operator.mul)))#[1, 2, 6, 24]this will multiply\nmaxm = [1,2,5,3,4]\nprint(list(accumulate(maxm,func = max)))#[1, 2, 5, 5, 5]\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# groupby but this concept is not clear\ng = [1,2,3,4,5]\ndef smaller_than_3(x):\n    return x<3\ngroup_obj = groupby(g, key = smaller_than_3)",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "maxm",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "maxm = [1,2,5,3,4]\nprint(list(accumulate(maxm,func = max)))#[1, 2, 5, 5, 5]\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# groupby but this concept is not clear\ng = [1,2,3,4,5]\ndef smaller_than_3(x):\n    return x<3\ngroup_obj = groupby(g, key = smaller_than_3)\nfor key,value in group_obj:",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "print(list(accumulate(maxm,func",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "print(list(accumulate(maxm,func = max)))#[1, 2, 5, 5, 5]\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# groupby but this concept is not clear\ng = [1,2,3,4,5]\ndef smaller_than_3(x):\n    return x<3\ngroup_obj = groupby(g, key = smaller_than_3)\nfor key,value in group_obj:\n    print(key,list(value)) #True [1, 2] False [3, 4, 5]",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "g = [1,2,3,4,5]\ndef smaller_than_3(x):\n    return x<3\ngroup_obj = groupby(g, key = smaller_than_3)\nfor key,value in group_obj:\n    print(key,list(value)) #True [1, 2] False [3, 4, 5]\n    person = [\n        {\"name\":\"rahim\", \"age\":23},\n        {\"name\":\"rwim\" ,\"age\":23},\n        {\"name\":\"nahim\", \"age\":26},",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "group_obj",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "group_obj = groupby(g, key = smaller_than_3)\nfor key,value in group_obj:\n    print(key,list(value)) #True [1, 2] False [3, 4, 5]\n    person = [\n        {\"name\":\"rahim\", \"age\":23},\n        {\"name\":\"rwim\" ,\"age\":23},\n        {\"name\":\"nahim\", \"age\":26},\n        {\"name\":\"raddddim\", \"age\":26}]\ngroup_by_age = groupby(person,key = lambda x:x[\"age\"])\nfor key,value in group_by_age:",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "group_by_age",
        "kind": 5,
        "importPath": "itrtools",
        "description": "itrtools",
        "peekOfCode": "group_by_age = groupby(person,key = lambda x:x[\"age\"])\nfor key,value in group_by_age:\n    print(key,list(value)) \n    '''23 [{'name': 'rahim', 'age': 23}, {'name': 'rwim', 'age': 23}]\n       26 [{'name': 'nahim', 'age': 26}, {'name': 'raddddim', 'age': 26}]''' \n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# //////////////////////////////////////////\n# ///////////////////////////////      Count()             ///////////////////\nfor i in count(10):     #it will print from 10 upto 15",
        "detail": "itrtools",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "num = [1,2,2,3,2,3,4,5,6,7,8]\nalph= [1.1,2.2,3.3,4.4]\nprint(num[-2])  # from reverse side\nprint(num[2:5]) #0[ 2,3,2] i.e index 1 include and index 5 exclude\nprint(num[:2]) # from start upto 2\nprint(num[3:]) # from 3 to onward\nprint(num[::2])  #means it leaves every second one\n# List functions \nnum.extend(alph)    #it append another list at the end\nnum.append(9)   #it append value at the end",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "num2 = num.copy()   #if only write num2 = num it will not work i.e whenever i append something to num2 it will be also appended to num b/c \n# num2 = list(num) # method for copying\n# num2 = num[:] # method for copying\nv = [45,5]\nv2 = v\nv2[1] = 4 #here v2 refer to the list object i.e output of both will be same\nprint(v)\nprint(v2)\n# 2d list and nested loops\nprint(\"printing 2dlist\")",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "v = [45,5]\nv2 = v\nv2[1] = 4 #here v2 refer to the list object i.e output of both will be same\nprint(v)\nprint(v2)\n# 2d list and nested loops\nprint(\"printing 2dlist\")\ntwo_d_list = [\n    [1,2,3,4],\n    [5,6,7,8],",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "v2 = v\nv2[1] = 4 #here v2 refer to the list object i.e output of both will be same\nprint(v)\nprint(v2)\n# 2d list and nested loops\nprint(\"printing 2dlist\")\ntwo_d_list = [\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,11,12]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "v2[1]",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "v2[1] = 4 #here v2 refer to the list object i.e output of both will be same\nprint(v)\nprint(v2)\n# 2d list and nested loops\nprint(\"printing 2dlist\")\ntwo_d_list = [\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,11,12]\n]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "two_d_list",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "two_d_list = [\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,11,12]\n]\nprint(two_d_list[0][0])\nfor row in two_d_list:\n    print(row)\nfor row in two_d_list:\n    for col in row:",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "l6",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "l6 = [1,2,3,4,5]\nl7 = [i*i for i in l6]      # 1,4,9,36.........\nimport collections\nfrom collections import Counter\n# list comprehension\nl5 = [1,2,3,4,5,6,7,8]\nl6 = [i*i for i in l5 if i==3 or i == 5]\nprint(l6)\n# how to count numbers in the array\na = 'kkkffffffffhhhhhhhhs';",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "l7",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "l7 = [i*i for i in l6]      # 1,4,9,36.........\nimport collections\nfrom collections import Counter\n# list comprehension\nl5 = [1,2,3,4,5,6,7,8]\nl6 = [i*i for i in l5 if i==3 or i == 5]\nprint(l6)\n# how to count numbers in the array\na = 'kkkffffffffhhhhhhhhs';\nchar_in_dict = {}",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "l5",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "l5 = [1,2,3,4,5,6,7,8]\nl6 = [i*i for i in l5 if i==3 or i == 5]\nprint(l6)\n# how to count numbers in the array\na = 'kkkffffffffhhhhhhhhs';\nchar_in_dict = {}\nfor char in a:\n    if char in char_in_dict:\n        char_in_dict[char] +=1 \n    else:",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "l6",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "l6 = [i*i for i in l5 if i==3 or i == 5]\nprint(l6)\n# how to count numbers in the array\na = 'kkkffffffffhhhhhhhhs';\nchar_in_dict = {}\nfor char in a:\n    if char in char_in_dict:\n        char_in_dict[char] +=1 \n    else:\n        char_in_dict[char] = 1",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "a = 'kkkffffffffhhhhhhhhs';\nchar_in_dict = {}\nfor char in a:\n    if char in char_in_dict:\n        char_in_dict[char] +=1 \n    else:\n        char_in_dict[char] = 1\nprint(char_in_dict)\nb = Counter(a)\nprint(b)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "char_in_dict",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "char_in_dict = {}\nfor char in a:\n    if char in char_in_dict:\n        char_in_dict[char] +=1 \n    else:\n        char_in_dict[char] = 1\nprint(char_in_dict)\nb = Counter(a)\nprint(b)\n# how to remove duplicaaes without changing their position",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "b = Counter(a)\nprint(b)\n# how to remove duplicaaes without changing their position\n# how to remove duplicattrs number from list\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\nz = list(b)\nprint(b)\nprint(a)\nprint(z)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "a = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\nz = list(b)\nprint(b)\nprint(a)\nprint(z)\n# how to remove duplicaaes without changing their position\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "b = set(a)\nz = list(b)\nprint(b)\nprint(a)\nprint(z)\n# how to remove duplicaaes without changing their position\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nc = set()",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "z = list(b)\nprint(b)\nprint(a)\nprint(z)\n# how to remove duplicaaes without changing their position\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nc = set()\nunique_list = []",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "a = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nb = set(a)\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nc = set()\nunique_list = []\nfor i in a:\n    if i  not in c:\n        unique_list.append(i)\n        c.add(i)\nprint(unique_list)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "b = set(a)\na = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nc = set()\nunique_list = []\nfor i in a:\n    if i  not in c:\n        unique_list.append(i)\n        c.add(i)\nprint(unique_list)\n# ",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "a = [5,7,8,1,2,3,5,7,8,4,3,5,6,7]\nc = set()\nunique_list = []\nfor i in a:\n    if i  not in c:\n        unique_list.append(i)\n        c.add(i)\nprint(unique_list)\n# \nprint(\"How would you merge two sorted lists into a single sorted list?\")",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "c = set()\nunique_list = []\nfor i in a:\n    if i  not in c:\n        unique_list.append(i)\n        c.add(i)\nprint(unique_list)\n# \nprint(\"How would you merge two sorted lists into a single sorted list?\")\ns1 = [1,3,4,5,7]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "unique_list",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "unique_list = []\nfor i in a:\n    if i  not in c:\n        unique_list.append(i)\n        c.add(i)\nprint(unique_list)\n# \nprint(\"How would you merge two sorted lists into a single sorted list?\")\ns1 = [1,3,4,5,7]\ns2 = [0,1,2,4,5,7,8]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s1 = [1,3,4,5,7]\ns2 = [0,1,2,4,5,7,8]\ns3 = []\nprint(s1)\nprint(s2)\ns1 = [1, 3, 4, 5, 7]\ns2 = [0, 1, 2, 4, 5, 7, 8]\ns3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s2 = [0,1,2,4,5,7,8]\ns3 = []\nprint(s1)\nprint(s2)\ns1 = [1, 3, 4, 5, 7]\ns2 = [0, 1, 2, 4, 5, 7, 8]\ns3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):\n    if s1[i] < s2[j]:",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s3 = []\nprint(s1)\nprint(s2)\ns1 = [1, 3, 4, 5, 7]\ns2 = [0, 1, 2, 4, 5, 7, 8]\ns3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):\n    if s1[i] < s2[j]:\n        s3.append(s1[i])",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s1 = [1, 3, 4, 5, 7]\ns2 = [0, 1, 2, 4, 5, 7, 8]\ns3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):\n    if s1[i] < s2[j]:\n        s3.append(s1[i])\n        i += 1\n    else:\n        s3.append(s2[j])",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s2 = [0, 1, 2, 4, 5, 7, 8]\ns3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):\n    if s1[i] < s2[j]:\n        s3.append(s1[i])\n        i += 1\n    else:\n        s3.append(s2[j])\n        j += 1",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "s3 = []\ni, j = 0, 0  # Pointers for s1 and s2\nwhile i < len(s1) and j < len(s2):\n    if s1[i] < s2[j]:\n        s3.append(s1[i])\n        i += 1\n    else:\n        s3.append(s2[j])\n        j += 1\n# Append remaining elements if any",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "i = 0\nj = 1\nmax = l1[0]\nfor i in range(len(l1)):\n    if max < l1[i]:\n        max = l1[i]\nprint(max)\nmin = l1[0]\nfor i in range(len(l1)):\n    if min > l1[i]:",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "j = 1\nmax = l1[0]\nfor i in range(len(l1)):\n    if max < l1[i]:\n        max = l1[i]\nprint(max)\nmin = l1[0]\nfor i in range(len(l1)):\n    if min > l1[i]:\n        min = l1[i]",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "max = l1[0]\nfor i in range(len(l1)):\n    if max < l1[i]:\n        max = l1[i]\nprint(max)\nmin = l1[0]\nfor i in range(len(l1)):\n    if min > l1[i]:\n        min = l1[i]\nprint(min)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "min",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "min = l1[0]\nfor i in range(len(l1)):\n    if min > l1[i]:\n        min = l1[i]\nprint(min)\nd1 = {}\nd2 = dict()\nd1 = {\"name\":\"rahim\"}\nd2 = {\"age\":\"23\"}\nd1.update(d2)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "d1 = {}\nd2 = dict()\nd1 = {\"name\":\"rahim\"}\nd2 = {\"age\":\"23\"}\nd1.update(d2)\nprint(d1)\nprint(d2)\n# how to iterate over dictionary\nfor keys,values in d1.items():\n    print(keys,values)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "d2 = dict()\nd1 = {\"name\":\"rahim\"}\nd2 = {\"age\":\"23\"}\nd1.update(d2)\nprint(d1)\nprint(d2)\n# how to iterate over dictionary\nfor keys,values in d1.items():\n    print(keys,values)\n# merging two dictionaries",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "d1 = {\"name\":\"rahim\"}\nd2 = {\"age\":\"23\"}\nd1.update(d2)\nprint(d1)\nprint(d2)\n# how to iterate over dictionary\nfor keys,values in d1.items():\n    print(keys,values)\n# merging two dictionaries\nd1.update(d2)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "d2 = {\"age\":\"23\"}\nd1.update(d2)\nprint(d1)\nprint(d2)\n# how to iterate over dictionary\nfor keys,values in d1.items():\n    print(keys,values)\n# merging two dictionaries\nd1.update(d2)\nd3 = {**d1, **d2}",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "d3 = {**d1, **d2}\n# how to remove data from a dictionary\n# del d3[\"age\"]\nd3.pop(\"name\")\nprint(d3)\n# to check existance of key\nif \"age\" in d3:\n    print(\"age of Rahim: \", d3[\"age\"])\n# Dictionary comprehension\n# how ot find  frequency of word",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "elements",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "elements = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple']\nfequency_of_items = {item: elements.count(item) for item in elements}\nprint(fequency_of_items)\n# Example 6: Combining Two Lists into a Dictionary\nkeys = [\"1\",\"2\", \"3\",\"4\",\"5\",\"6\"]\nvalues = [\"a\",\"b\",\"c\",\"d\",\"f\",\"g\"]\ncombined_list_as_dict = {keys[i]:values[i] for i in range(len(keys))}\nprint(combined_list_as_dict)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "fequency_of_items",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "fequency_of_items = {item: elements.count(item) for item in elements}\nprint(fequency_of_items)\n# Example 6: Combining Two Lists into a Dictionary\nkeys = [\"1\",\"2\", \"3\",\"4\",\"5\",\"6\"]\nvalues = [\"a\",\"b\",\"c\",\"d\",\"f\",\"g\"]\ncombined_list_as_dict = {keys[i]:values[i] for i in range(len(keys))}\nprint(combined_list_as_dict)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "keys = [\"1\",\"2\", \"3\",\"4\",\"5\",\"6\"]\nvalues = [\"a\",\"b\",\"c\",\"d\",\"f\",\"g\"]\ncombined_list_as_dict = {keys[i]:values[i] for i in range(len(keys))}\nprint(combined_list_as_dict)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "values = [\"a\",\"b\",\"c\",\"d\",\"f\",\"g\"]\ncombined_list_as_dict = {keys[i]:values[i] for i in range(len(keys))}\nprint(combined_list_as_dict)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "combined_list_as_dict",
        "kind": 5,
        "importPath": "lists",
        "description": "lists",
        "peekOfCode": "combined_list_as_dict = {keys[i]:values[i] for i in range(len(keys))}\nprint(combined_list_as_dict)",
        "detail": "lists",
        "documentation": {}
    },
    {
        "label": "question",
        "kind": 6,
        "importPath": "mcqs",
        "description": "mcqs",
        "peekOfCode": "class question:\n    def __init__(self, prompt, answer):\n        self.prompt = prompt\n        self.answer = answer\nquestion_prompts = [\n\"what is the clolor of apples?\\n(a)g/r\\n(B)b\\n(c)pink \\n\\n\",\n\"what is the clolor of mangoo?\\n(a)g\\n(B)y\\n(c)r \\n\\n\",\n\"what is the clolor of malta?\\n(a)g\\n(B)b\\n(c)r \\n\\n \"\n]\nquestions =[",
        "detail": "mcqs",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "mcqs",
        "description": "mcqs",
        "peekOfCode": "def run_test(questions):\n    score = 0\n    for question in questions:\n        answer = input(question.prompt)\n        if answer == question.answer:\n            score +=1\n    print(\"you got \"+ str(score) + \"/\" + str(len(questions)) + \" correct. \")        \nrun_test(questions)",
        "detail": "mcqs",
        "documentation": {}
    },
    {
        "label": "question_prompts",
        "kind": 5,
        "importPath": "mcqs",
        "description": "mcqs",
        "peekOfCode": "question_prompts = [\n\"what is the clolor of apples?\\n(a)g/r\\n(B)b\\n(c)pink \\n\\n\",\n\"what is the clolor of mangoo?\\n(a)g\\n(B)y\\n(c)r \\n\\n\",\n\"what is the clolor of malta?\\n(a)g\\n(B)b\\n(c)r \\n\\n \"\n]\nquestions =[\n     question(prompt = question_prompts[0], answer = 'a'),\n     question(prompt = question_prompts[1], answer = 'b'),\n     question(prompt = question_prompts[2],answer = 'c')\n]",
        "detail": "mcqs",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "midlabsgame",
        "description": "midlabsgame",
        "peekOfCode": "color = input(\"Enter a color\")\nplural_noun = input(\"Enter aplural_noun\")\ncelebrity = input(\"Enter a celebrity\")\nprint(\"roses are \" + color)\nprint(\"vilets are blue \" + plural_noun)\nprint(\"I ove you\" + celebrity)",
        "detail": "midlabsgame",
        "documentation": {}
    },
    {
        "label": "plural_noun",
        "kind": 5,
        "importPath": "midlabsgame",
        "description": "midlabsgame",
        "peekOfCode": "plural_noun = input(\"Enter aplural_noun\")\ncelebrity = input(\"Enter a celebrity\")\nprint(\"roses are \" + color)\nprint(\"vilets are blue \" + plural_noun)\nprint(\"I ove you\" + celebrity)",
        "detail": "midlabsgame",
        "documentation": {}
    },
    {
        "label": "celebrity",
        "kind": 5,
        "importPath": "midlabsgame",
        "description": "midlabsgame",
        "peekOfCode": "celebrity = input(\"Enter a celebrity\")\nprint(\"roses are \" + color)\nprint(\"vilets are blue \" + plural_noun)\nprint(\"I ove you\" + celebrity)",
        "detail": "midlabsgame",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "nmbr",
        "description": "nmbr",
        "peekOfCode": "num = 5\nnum = str(num)\nprint(type(num))  #type = str\n# abs(num) give absolute number\n# pow(3,2) = 3^2\n# max(4,5) give high number min(6,7)\n#  round(3.7)  == 4\n# by importing  \"\"\"\" from math import * ==> floor(3.7) == 3, ceil(3.7) == 4\n# sqrt(36) == 6\n#",
        "detail": "nmbr",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "nmbr",
        "description": "nmbr",
        "peekOfCode": "num = str(num)\nprint(type(num))  #type = str\n# abs(num) give absolute number\n# pow(3,2) = 3^2\n# max(4,5) give high number min(6,7)\n#  round(3.7)  == 4\n# by importing  \"\"\"\" from math import * ==> floor(3.7) == 3, ceil(3.7) == 4\n# sqrt(36) == 6\n#",
        "detail": "nmbr",
        "documentation": {}
    },
    {
        "label": "family_file",
        "kind": 5,
        "importPath": "Reading_Files",
        "description": "Reading_Files",
        "peekOfCode": "family_file = open(\"textfile.txt\",\"r\") #reading information\nprint(family_file.readable()) #we should check that the file is readable or not\n# print(family_file.read()) # to read all \n# print(family_file.readline()) #to read only loine starts from ist one \n# print(family_file.readlines()[1])  #family_file.readlines() this function gives the file ion a array style so we can access the specific infomation by indexing\nfor data in family_file.readlines():\n    print(data)\nfamily_file.close()\nfamily_file = open(\"textfile.txt\",\"w\") #overriding a file\n# family_file.write(\"\\nume hani\")",
        "detail": "Reading_Files",
        "documentation": {}
    },
    {
        "label": "family_file",
        "kind": 5,
        "importPath": "Reading_Files",
        "description": "Reading_Files",
        "peekOfCode": "family_file = open(\"textfile.txt\",\"w\") #overriding a file\n# family_file.write(\"\\nume hani\")\nfamily_file = open(\"textfile.txt\",\"r+\") # appending new information at the last \nprint(family_file.writable()) #we should check that the file is writable or not\nfamily_file.write(\"\\nume hani\")\nprint(family_file.read())\nopen(\"textfile.txt\",\"r+\") # read + wride information\n# open(\"index.html\",\"w\") # in this way we can also make a mew file\n# family_file.write(\"<p>thsi is Paragaph </p>\")",
        "detail": "Reading_Files",
        "documentation": {}
    },
    {
        "label": "family_file",
        "kind": 5,
        "importPath": "Reading_Files",
        "description": "Reading_Files",
        "peekOfCode": "family_file = open(\"textfile.txt\",\"r+\") # appending new information at the last \nprint(family_file.writable()) #we should check that the file is writable or not\nfamily_file.write(\"\\nume hani\")\nprint(family_file.read())\nopen(\"textfile.txt\",\"r+\") # read + wride information\n# open(\"index.html\",\"w\") # in this way we can also make a mew file\n# family_file.write(\"<p>thsi is Paragaph </p>\")",
        "detail": "Reading_Files",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "s = set(\"hello\")\nprint(s)        #{'o', 'e', 'l', 'h'} means order is not important and show the 'l' only once\ns = {}\ns1 = set()\ns1.add(0)       #adding elemnt\ns1.add(1)       #adding elemnt\ns1.add(2)       #adding elemnt\ns1.add(3)       #adding elemnt\ns1.remove(0)\nprint(type(s))      #type = dict",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "s = {}\ns1 = set()\ns1.add(0)       #adding elemnt\ns1.add(1)       #adding elemnt\ns1.add(2)       #adding elemnt\ns1.add(3)       #adding elemnt\ns1.remove(0)\nprint(type(s))      #type = dict\nprint(type(s1))      #type = set\n# print(s1)    #typ",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "s1 = set()\ns1.add(0)       #adding elemnt\ns1.add(1)       #adding elemnt\ns1.add(2)       #adding elemnt\ns1.add(3)       #adding elemnt\ns1.remove(0)\nprint(type(s))      #type = dict\nprint(type(s1))      #type = set\n# print(s1)    #typ\n# s1.discard(3)       #if not found the not give give any error",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "odd",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "odd = {1,3,5,7,9}\neven = {0,2,4,6,8}\nprime ={2,3,5,7,11}\nu= odd.union(even)\nn = prime.intersection(odd)\nprint(u)\nprint(n)\ndiff = prime.difference(odd)\nprint(diff)\ndiffsymtric = prime.symmetric_difference(odd)",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "even = {0,2,4,6,8}\nprime ={2,3,5,7,11}\nu= odd.union(even)\nn = prime.intersection(odd)\nprint(u)\nprint(n)\ndiff = prime.difference(odd)\nprint(diff)\ndiffsymtric = prime.symmetric_difference(odd)\nprint(diffsymtric)      #will give all the element of both sets except the common one",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "n = prime.intersection(odd)\nprint(u)\nprint(n)\ndiff = prime.difference(odd)\nprint(diff)\ndiffsymtric = prime.symmetric_difference(odd)\nprint(diffsymtric)      #will give all the element of both sets except the common one\nsetA = {1,2,3,4,5,6}\nsetB = { 7,8,9,0}\nsetA.update(setB)",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "diff = prime.difference(odd)\nprint(diff)\ndiffsymtric = prime.symmetric_difference(odd)\nprint(diffsymtric)      #will give all the element of both sets except the common one\nsetA = {1,2,3,4,5,6}\nsetB = { 7,8,9,0}\nsetA.update(setB)\nprint(setA)\nprint(setA.issubset(setB))# false\nprint(setA.issuperset(setB))# true",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "diffsymtric",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "diffsymtric = prime.symmetric_difference(odd)\nprint(diffsymtric)      #will give all the element of both sets except the common one\nsetA = {1,2,3,4,5,6}\nsetB = { 7,8,9,0}\nsetA.update(setB)\nprint(setA)\nprint(setA.issubset(setB))# false\nprint(setA.issuperset(setB))# true\nprint(setB.issubset(setA))#true\nprint(setB.isdisjoint(setA))#false",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "setA",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "setA = {1,2,3,4,5,6}\nsetB = { 7,8,9,0}\nsetA.update(setB)\nprint(setA)\nprint(setA.issubset(setB))# false\nprint(setA.issuperset(setB))# true\nprint(setB.issubset(setA))#true\nprint(setB.isdisjoint(setA))#false\n# //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n# copying set is same as in list",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "setB",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "setB = { 7,8,9,0}\nsetA.update(setB)\nprint(setA)\nprint(setA.issubset(setB))# false\nprint(setA.issuperset(setB))# true\nprint(setB.issubset(setA))#true\nprint(setB.isdisjoint(setA))#false\n# //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n# copying set is same as in list\n# //////////////////////////////////////////",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "sets",
        "description": "sets",
        "peekOfCode": "a = frozenset([1,2,3,4,5])\na.add(6)        #frozen object has no attribute add\na.remove(6)        #frozen object has no attribute add",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "my_profession",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "my_profession = \"Web Development\"\nprint(my_profession.lower()) # to make all character small\nprint(my_profession.upper()) # to make all character capitale\nprint(my_profession.isupper()) # to check all the character are capital or not -->Result False B/C  strings are immutable in python until i not \n# reassign the the new value to the variable it will not change and when we reassin the new value to the same variable the previuos value \n# is still store in the memory but the variable is now assign to the new value\nmy_profession = my_profession.upper()\nprint(my_profession.isupper()) # now it will give expected result i.e True\nname = \"Rahim\"\nprint(id(name)) #memory address",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "my_profession",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "my_profession = my_profession.upper()\nprint(my_profession.isupper()) # now it will give expected result i.e True\nname = \"Rahim\"\nprint(id(name)) #memory address\nprint(len(my_profession)) #the length of the string\nprint(my_profession[0])  # to take the individual character\nmy_profession = \"Web Development\"\nprint(my_profession.index(\"l\"))  # to find the index of character i.e 8\nprint( my_profession.replace(\"Web\",\"App\")) #to replace \nmystring = \"\"\"hello   ",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "name = \"Rahim\"\nprint(id(name)) #memory address\nprint(len(my_profession)) #the length of the string\nprint(my_profession[0])  # to take the individual character\nmy_profession = \"Web Development\"\nprint(my_profession.index(\"l\"))  # to find the index of character i.e 8\nprint( my_profession.replace(\"Web\",\"App\")) #to replace \nmystring = \"\"\"hello   \nworld\"\"\"\nprint(mystring)     #hello and world in new line",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "my_profession",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "my_profession = \"Web Development\"\nprint(my_profession.index(\"l\"))  # to find the index of character i.e 8\nprint( my_profession.replace(\"Web\",\"App\")) #to replace \nmystring = \"\"\"hello   \nworld\"\"\"\nprint(mystring)     #hello and world in new line\nmystring1 = \"\"\"                 hello   \\\n    world\"\"\"\nprint(mystring1)        # hello         world\n# /////////////////////////////////////////////////////////////////////",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "mystring",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "mystring = \"\"\"hello   \nworld\"\"\"\nprint(mystring)     #hello and world in new line\nmystring1 = \"\"\"                 hello   \\\n    world\"\"\"\nprint(mystring1)        # hello         world\n# /////////////////////////////////////////////////////////////////////\n# string also  supports slicing\nprint(mystring1.strip())    #can remove the extra space in start and after\n# .startwith and .endswith  checks the start and last",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "mystring1",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "mystring1 = \"\"\"                 hello   \\\n    world\"\"\"\nprint(mystring1)        # hello         world\n# /////////////////////////////////////////////////////////////////////\n# string also  supports slicing\nprint(mystring1.strip())    #can remove the extra space in start and after\n# .startwith and .endswith  checks the start and last\n# .find use to find the index of any character \nmylist = mystring.split() # string to list\nprint(mylist)       #['hello','world']",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "mylist",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "mylist = mystring.split() # string to list\nprint(mylist)       #['hello','world']\nnewstring = ' '.join(mylist)\nprint(newstring)        #hello world\n# revere a string\ns1 = 'rahim'\ns2 = s1[::-1]\nprint(s2)\ns1 = \"abdulsamad\"\ns2 = ''",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "newstring",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "newstring = ' '.join(mylist)\nprint(newstring)        #hello world\n# revere a string\ns1 = 'rahim'\ns2 = s1[::-1]\nprint(s2)\ns1 = \"abdulsamad\"\ns2 = ''\nj = len(s1)-1\nwhile j >= 0:",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s1 = 'rahim'\ns2 = s1[::-1]\nprint(s2)\ns1 = \"abdulsamad\"\ns2 = ''\nj = len(s1)-1\nwhile j >= 0:\n    s2 += s1[j]\n    j -= 1\nprint(s2)",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s2 = s1[::-1]\nprint(s2)\ns1 = \"abdulsamad\"\ns2 = ''\nj = len(s1)-1\nwhile j >= 0:\n    s2 += s1[j]\n    j -= 1\nprint(s2)\n# to check palindrome",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s1 = \"abdulsamad\"\ns2 = ''\nj = len(s1)-1\nwhile j >= 0:\n    s2 += s1[j]\n    j -= 1\nprint(s2)\n# to check palindrome\nsp = \"karak\"\nj = len(sp)-1 ",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s2 = ''\nj = len(s1)-1\nwhile j >= 0:\n    s2 += s1[j]\n    j -= 1\nprint(s2)\n# to check palindrome\nsp = \"karak\"\nj = len(sp)-1 \ni = 0",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "j = len(s1)-1\nwhile j >= 0:\n    s2 += s1[j]\n    j -= 1\nprint(s2)\n# to check palindrome\nsp = \"karak\"\nj = len(sp)-1 \ni = 0\nwhile j >= 0:",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "sp",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "sp = \"karak\"\nj = len(sp)-1 \ni = 0\nwhile j >= 0:\n    if sp[i] == sp[j]:\n        j -= 1\n        i += 1\n    else:\n        break\nif i == len(sp) :",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "j = len(sp)-1 \ni = 0\nwhile j >= 0:\n    if sp[i] == sp[j]:\n        j -= 1\n        i += 1\n    else:\n        break\nif i == len(sp) :\n    print(\"palidndrome\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "i = 0\nwhile j >= 0:\n    if sp[i] == sp[j]:\n        j -= 1\n        i += 1\n    else:\n        break\nif i == len(sp) :\n    print(\"palidndrome\")\n# easiest way of checking palindrome",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "phrase",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "phrase = \"rahim\"\nvow = 0\ncons = 0\nvowels = \"aeiou\"\nfor i in phrase:\n    if i in vowels:\n        vow += 1\n    else:\n        cons += 1\nprint(f\"vowels = {vow} and consonants = {cons}\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "vow",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "vow = 0\ncons = 0\nvowels = \"aeiou\"\nfor i in phrase:\n    if i in vowels:\n        vow += 1\n    else:\n        cons += 1\nprint(f\"vowels = {vow} and consonants = {cons}\")\n# python program that remove dublicates from string",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "cons",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "cons = 0\nvowels = \"aeiou\"\nfor i in phrase:\n    if i in vowels:\n        vow += 1\n    else:\n        cons += 1\nprint(f\"vowels = {vow} and consonants = {cons}\")\n# python program that remove dublicates from string\na = \"applewazir\"",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "vowels",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "vowels = \"aeiou\"\nfor i in phrase:\n    if i in vowels:\n        vow += 1\n    else:\n        cons += 1\nprint(f\"vowels = {vow} and consonants = {cons}\")\n# python program that remove dublicates from string\na = \"applewazir\"\nnon_duplicate = ''",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "print(f\"vowels",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "print(f\"vowels = {vow} and consonants = {cons}\")\n# python program that remove dublicates from string\na = \"applewazir\"\nnon_duplicate = ''\nfor i in a:\n    if i not in non_duplicate:\n       non_duplicate =non_duplicate + i\nprint(non_duplicate)\n# longest_word(\"The quick brown fox jumps over the lazy dog\")  # Output: \"jumps\"\na = \"The quick brown fox jumps over the lazy dog\"",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "a = \"applewazir\"\nnon_duplicate = ''\nfor i in a:\n    if i not in non_duplicate:\n       non_duplicate =non_duplicate + i\nprint(non_duplicate)\n# longest_word(\"The quick brown fox jumps over the lazy dog\")  # Output: \"jumps\"\na = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nlongest_word = \"\"",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "non_duplicate",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "non_duplicate = ''\nfor i in a:\n    if i not in non_duplicate:\n       non_duplicate =non_duplicate + i\nprint(non_duplicate)\n# longest_word(\"The quick brown fox jumps over the lazy dog\")  # Output: \"jumps\"\na = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nlongest_word = \"\"\nfor word in words:",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "a = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nlongest_word = \"\"\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\nprint(longest_word)\n# find the number of words in phrase\na = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "words = a.split()\nlongest_word = \"\"\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\nprint(longest_word)\n# find the number of words in phrase\na = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nb = len(words)",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "longest_word",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "longest_word = \"\"\nfor word in words:\n    if len(word) > len(longest_word):\n        longest_word = word\nprint(longest_word)\n# find the number of words in phrase\na = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nb = len(words)\nprint(\"The number of wrods in a given phrase is \", b)",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "a = \"The quick brown fox jumps over the lazy dog\"\nwords = a.split()\nb = len(words)\nprint(\"The number of wrods in a given phrase is \", b)\n# Write a function that checks if two given strings are anagrams (contain the same characters in different order)\ns1 = \"sieent\"\ns2 = \"listen\"\nif sorted(s1) == sorted(s2) :\n    print(\"anagram\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "words = a.split()\nb = len(words)\nprint(\"The number of wrods in a given phrase is \", b)\n# Write a function that checks if two given strings are anagrams (contain the same characters in different order)\ns1 = \"sieent\"\ns2 = \"listen\"\nif sorted(s1) == sorted(s2) :\n    print(\"anagram\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "b = len(words)\nprint(\"The number of wrods in a given phrase is \", b)\n# Write a function that checks if two given strings are anagrams (contain the same characters in different order)\ns1 = \"sieent\"\ns2 = \"listen\"\nif sorted(s1) == sorted(s2) :\n    print(\"anagram\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s1 = \"sieent\"\ns2 = \"listen\"\nif sorted(s1) == sorted(s2) :\n    print(\"anagram\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "strings",
        "description": "strings",
        "peekOfCode": "s2 = \"listen\"\nif sorted(s1) == sorted(s2) :\n    print(\"anagram\")",
        "detail": "strings",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "translator",
        "description": "translator",
        "peekOfCode": "def translate(phrase):\n    translation = \"\"\n    for letter in phrase:\n        if letter.lower() in \"aeiou\":\n            if letter.isupper():\n                translation = translation + \"G\"\n            else:\n                translation = translation + \"g\"\n        else:\n            translation = translation +letter",
        "detail": "translator",
        "documentation": {}
    },
    {
        "label": "valueTooHigh",
        "kind": 6,
        "importPath": "try_exept",
        "description": "try_exept",
        "peekOfCode": "class valueTooHigh(Exception):\n    pass\nclass valueTooSmall(Exception):\n    def __init__(self,message,value):\n        self.message = message\n        self.value = value\ndef test_value(x):\n    if x>100:\n        raise valueTooHigh(\"value is too high\")\n    if x < 5:",
        "detail": "try_exept",
        "documentation": {}
    },
    {
        "label": "valueTooSmall",
        "kind": 6,
        "importPath": "try_exept",
        "description": "try_exept",
        "peekOfCode": "class valueTooSmall(Exception):\n    def __init__(self,message,value):\n        self.message = message\n        self.value = value\ndef test_value(x):\n    if x>100:\n        raise valueTooHigh(\"value is too high\")\n    if x < 5:\n        raise valueTooSmall(\"value is too small\",x)    \ntry:",
        "detail": "try_exept",
        "documentation": {}
    },
    {
        "label": "test_value",
        "kind": 2,
        "importPath": "try_exept",
        "description": "try_exept",
        "peekOfCode": "def test_value(x):\n    if x>100:\n        raise valueTooHigh(\"value is too high\")\n    if x < 5:\n        raise valueTooSmall(\"value is too small\",x)    \ntry:\n    test_value(3)\nexcept valueTooHigh as e:\n    print(e)\nexcept valueTooSmall as e:",
        "detail": "try_exept",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t1 = (1,2,3,5,5,5,5,) \nl1 = [1,2,3]\nprint(t1.count(5)) # 4\nprint(t1.index(5)) # 3 eturn the first occurance\nt2 = tuple(l1) # makes it tuple\ncoordinates = [(1,2),(1,3),(1,4)] \nprint(coordinates[1])\nprint(coordinates[0])\n# //////////////////////////////////////////////////////////////////////////////////////\n# slicing same as in list ",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "l1 = [1,2,3]\nprint(t1.count(5)) # 4\nprint(t1.index(5)) # 3 eturn the first occurance\nt2 = tuple(l1) # makes it tuple\ncoordinates = [(1,2),(1,3),(1,4)] \nprint(coordinates[1])\nprint(coordinates[0])\n# //////////////////////////////////////////////////////////////////////////////////////\n# slicing same as in list \n# unpacking tuple ",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t2 = tuple(l1) # makes it tuple\ncoordinates = [(1,2),(1,3),(1,4)] \nprint(coordinates[1])\nprint(coordinates[0])\n# //////////////////////////////////////////////////////////////////////////////////////\n# slicing same as in list \n# unpacking tuple \ntp1 = (\"rahim\" , \"23\")\nname, age = tp1\nprint(name) #rahim",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "coordinates",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "coordinates = [(1,2),(1,3),(1,4)] \nprint(coordinates[1])\nprint(coordinates[0])\n# //////////////////////////////////////////////////////////////////////////////////////\n# slicing same as in list \n# unpacking tuple \ntp1 = (\"rahim\" , \"23\")\nname, age = tp1\nprint(name) #rahim\nprint(age)  #23",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "tp1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "tp1 = (\"rahim\" , \"23\")\nname, age = tp1\nprint(name) #rahim\nprint(age)  #23\n# ////////////////////////////////////////////////////////////////////////////////////\ntple = (1,2,3,4)\ni1,*i2,i3 = tple\nprint(i1)       # 1 the very first item \nprint(i2)      # 2,3 will make the lsit of midle items of first and last\nprint(i3)       # 4 the very last item",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "tple",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "tple = (1,2,3,4)\ni1,*i2,i3 = tple\nprint(i1)       # 1 the very first item \nprint(i2)      # 2,3 will make the lsit of midle items of first and last\nprint(i3)       # 4 the very last item\n# ////////////////////////////////////////////////////////////////////////////////////\nlist1 = [\"hello\",1,2,3,True]\ntple1 = tuple([\"hello\",1,2,3,True])\nprint(sys.getsizeof(list1),\"bytes\")\nprint(sys.getsizeof(tple1),\"bytes\")     #tuples posses less space than list and is more efficent than list while dealing large data",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "i1,*i2,i3",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "i1,*i2,i3 = tple\nprint(i1)       # 1 the very first item \nprint(i2)      # 2,3 will make the lsit of midle items of first and last\nprint(i3)       # 4 the very last item\n# ////////////////////////////////////////////////////////////////////////////////////\nlist1 = [\"hello\",1,2,3,True]\ntple1 = tuple([\"hello\",1,2,3,True])\nprint(sys.getsizeof(list1),\"bytes\")\nprint(sys.getsizeof(tple1),\"bytes\")     #tuples posses less space than list and is more efficent than list while dealing large data\nprint(timeit.timeit(stmt=\"[1,2,3,4,5,6]\",number=10000000))",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "list1 = [\"hello\",1,2,3,True]\ntple1 = tuple([\"hello\",1,2,3,True])\nprint(sys.getsizeof(list1),\"bytes\")\nprint(sys.getsizeof(tple1),\"bytes\")     #tuples posses less space than list and is more efficent than list while dealing large data\nprint(timeit.timeit(stmt=\"[1,2,3,4,5,6]\",number=10000000))\nprint(timeit.timeit(stmt=\"(1,2,3,4,5,6)\",number=10000000)) #if we repeat the give number 10000000 time the list creation will take 0.3 greater time than tuple\n# ///////////////////////////////////////////////////////////////////////////////////\nt5 = (1,2,3,4)\nt6 = (6,7,8)\nt7 = t5 + t6",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "tple1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "tple1 = tuple([\"hello\",1,2,3,True])\nprint(sys.getsizeof(list1),\"bytes\")\nprint(sys.getsizeof(tple1),\"bytes\")     #tuples posses less space than list and is more efficent than list while dealing large data\nprint(timeit.timeit(stmt=\"[1,2,3,4,5,6]\",number=10000000))\nprint(timeit.timeit(stmt=\"(1,2,3,4,5,6)\",number=10000000)) #if we repeat the give number 10000000 time the list creation will take 0.3 greater time than tuple\n# ///////////////////////////////////////////////////////////////////////////////////\nt5 = (1,2,3,4)\nt6 = (6,7,8)\nt7 = t5 + t6\nprint(t7)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t5",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t5 = (1,2,3,4)\nt6 = (6,7,8)\nt7 = t5 + t6\nprint(t7)\nl1 = list(t7)\nprint(l1)\n# How would you create a tuple with a single element?\nt1 = (1,)\nt2 = (1)\nt3 = ()",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t6",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t6 = (6,7,8)\nt7 = t5 + t6\nprint(t7)\nl1 = list(t7)\nprint(l1)\n# How would you create a tuple with a single element?\nt1 = (1,)\nt2 = (1)\nt3 = ()\nt5 = set( )",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t7",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t7 = t5 + t6\nprint(t7)\nl1 = list(t7)\nprint(l1)\n# How would you create a tuple with a single element?\nt1 = (1,)\nt2 = (1)\nt3 = ()\nt5 = set( )\nt4 = (1,2,4,7,9)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "l1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "l1 = list(t7)\nprint(l1)\n# How would you create a tuple with a single element?\nt1 = (1,)\nt2 = (1)\nt3 = ()\nt5 = set( )\nt4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t1 = (1,)\nt2 = (1)\nt3 = ()\nt5 = set( )\nt4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))\nprint(type(t3))\nprint(type(t4))\nprint(type(t5))",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t2 = (1)\nt3 = ()\nt5 = set( )\nt4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))\nprint(type(t3))\nprint(type(t4))\nprint(type(t5))\n# accessing elements of tuple",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t3 = ()\nt5 = set( )\nt4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))\nprint(type(t3))\nprint(type(t4))\nprint(type(t5))\n# accessing elements of tuple\nprint(t4[3])",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t5",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t5 = set( )\nt4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))\nprint(type(t3))\nprint(type(t4))\nprint(type(t5))\n# accessing elements of tuple\nprint(t4[3])\n# concatenate two tuples",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t4",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t4 = (1,2,4,7,9)\nprint(type(t1))\nprint(type(t2))\nprint(type(t3))\nprint(type(t4))\nprint(type(t5))\n# accessing elements of tuple\nprint(t4[3])\n# concatenate two tuples\nt1 = (1,2,3)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t1 = (1,2,3)\nt2 = (4,5,7)\nt10 = t1 + t2\nprint(t10)\n# assigning elements of tupples to variables\na,*b,c = t10\nprint(a)\nprint(b)\nprint(c)\n# to use tuple as key in dictionary ",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t2 = (4,5,7)\nt10 = t1 + t2\nprint(t10)\n# assigning elements of tupples to variables\na,*b,c = t10\nprint(a)\nprint(b)\nprint(c)\n# to use tuple as key in dictionary \nt9 = (1,2,3)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t10",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t10 = t1 + t2\nprint(t10)\n# assigning elements of tupples to variables\na,*b,c = t10\nprint(a)\nprint(b)\nprint(c)\n# to use tuple as key in dictionary \nt9 = (1,2,3)\nd1 = {}",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "a,*b,c",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "a,*b,c = t10\nprint(a)\nprint(b)\nprint(c)\n# to use tuple as key in dictionary \nt9 = (1,2,3)\nd1 = {}\nkey = t9\nvalue = \"tuple as a key value\"\nd1[key] = value",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "t9",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "t9 = (1,2,3)\nd1 = {}\nkey = t9\nvalue = \"tuple as a key value\"\nd1[key] = value\nprint(d1)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "d1 = {}\nkey = t9\nvalue = \"tuple as a key value\"\nd1[key] = value\nprint(d1)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "key = t9\nvalue = \"tuple as a key value\"\nd1[key] = value\nprint(d1)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "value = \"tuple as a key value\"\nd1[key] = value\nprint(d1)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "d1[key]",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "d1[key] = value\nprint(d1)",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "user_input",
        "description": "user_input",
        "peekOfCode": "name = input(\"enter your name: \")\nprint(\"hello \" + name)",
        "detail": "user_input",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "var_datatypes",
        "description": "var_datatypes",
        "peekOfCode": "name1 = \"ali\"\nage = \"1\"\nname2 = \"Muhammad\" \nage1 = 2\nprint(name1 + \" is \" + age + \" year old:\")  # we can only concatenate string as there by plus sign\nprint(name2 + \" is \",age1,\" year old:\") #if I have to write the integer with string so i have to write with this way\nprint(f\"{name2} is {age1} year old\") # professional way",
        "detail": "var_datatypes",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "var_datatypes",
        "description": "var_datatypes",
        "peekOfCode": "age = \"1\"\nname2 = \"Muhammad\" \nage1 = 2\nprint(name1 + \" is \" + age + \" year old:\")  # we can only concatenate string as there by plus sign\nprint(name2 + \" is \",age1,\" year old:\") #if I have to write the integer with string so i have to write with this way\nprint(f\"{name2} is {age1} year old\") # professional way",
        "detail": "var_datatypes",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "var_datatypes",
        "description": "var_datatypes",
        "peekOfCode": "name2 = \"Muhammad\" \nage1 = 2\nprint(name1 + \" is \" + age + \" year old:\")  # we can only concatenate string as there by plus sign\nprint(name2 + \" is \",age1,\" year old:\") #if I have to write the integer with string so i have to write with this way\nprint(f\"{name2} is {age1} year old\") # professional way",
        "detail": "var_datatypes",
        "documentation": {}
    },
    {
        "label": "age1",
        "kind": 5,
        "importPath": "var_datatypes",
        "description": "var_datatypes",
        "peekOfCode": "age1 = 2\nprint(name1 + \" is \" + age + \" year old:\")  # we can only concatenate string as there by plus sign\nprint(name2 + \" is \",age1,\" year old:\") #if I have to write the integer with string so i have to write with this way\nprint(f\"{name2} is {age1} year old\") # professional way",
        "detail": "var_datatypes",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "while_loops",
        "description": "while_loops",
        "peekOfCode": "i = 1\nwhile i<10:     #we can imlement more than one condition in this loop\n    print(i)\n    i = i+1\n    i += 1",
        "detail": "while_loops",
        "documentation": {}
    }
]